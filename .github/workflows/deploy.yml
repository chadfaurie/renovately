# This is a basic workflow to help you get started with Actions

name: Build Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [main, develop, sandbox]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-1 # set this to your preferred AWS region, e.g. us-west-1
  AWS_ACCESS_KEY_NAME: AWS_ACCESS_KEY_ID_UATU
  AWS_SECRET_ACCESS_KEY_NAME: AWS_SECRET_ACCESS_KEY_UATU

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.project.outputs.project_name }}
      environment: ${{ steps.environment.outputs.environment }}
    env:
      environments: '{"main": "production", "develop": "development"}'
    steps:
      - name: Get Project Name
        id: project
        run: |
          PROJECT_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          echo "project_name=$PROJECT_NAME"
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Set env name
        id: environment
        run: |
          ENV=$(echo '${{ env.environments }}' | jq -r '.${{ steps.extract_branch.outputs.branch }}')
          echo "environment=$ENV"
          echo "environment=$ENV" >> $GITHUB_OUTPUT

  checks:
    name: Run Checks
    needs:
      - setup
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          # fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          always-auth: true
          node-version: 18
          registry-url: https://npm.pkg.github.com
          scope: "@bluetrino"
          cache: "yarn"

      - name: Get Latest Tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

      - name: Install Packages
        run: |
          yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_TOKEN }}

      - name: Lint
        run: yarn lint

      # - name: Release
      #   env:
      #     NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: npx semantic-release

      # - name: Set Version
      #   id: version
      #   run: |
      #     if [ -z "${{ env.SEMANTIC_VERSION }}" ]
      #     then
      #           echo "PROJECT_VERSION=${{ needs.setup.outputs.project_name }}@${{ steps.previoustag.outputs.tag }}" >> $GITHUB_ENV
      #           echo "VERSION=${{ steps.previoustag.outputs.tag }}" >> $GITHUB_ENV
      #     else
      #           echo "PROJECT_VERSION=${{ needs.setup.outputs.project_name }}@${{ env.SEMANTIC_VERSION }}" >> $GITHUB_ENV
      #           echo "VERSION=${{ env.SEMANTIC_VERSION }}" >> $GITHUB_ENV
      #     fi

  database:
    name: Deploy Supbase Database
    needs:
      - checks
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
    steps:
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Link Supabase Project
        run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - name: Deploy Supabase Database
        run: supabase db push

  adminUi:
    name: Deploy Admin UI
    needs:
      - checks
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          # fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          always-auth: true
          node-version: 18
          registry-url: https://npm.pkg.github.com
          scope: "@bluetrino"
          cache: "yarn"

      - name: Install Packages
        run: |
          yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_TOKEN }}

      - name: Build
        working-directory: packages/admin-ui
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

        run: yarn build

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ vars.PROJECT_NAME }}
          directory: dist
          # Optional: Enable this if you want to have GitHub Deployments triggered
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Switch what branch you are publishing to.
          # By default this will be the branch which triggered this workflow
          branch: main
          # Optional: Change the working directory
          workingDirectory: packages/renovately-app
          # Optional: Change the Wrangler version, allows you to point to a specific version or a tag such as `beta`
          wranglerVersion: "3"
